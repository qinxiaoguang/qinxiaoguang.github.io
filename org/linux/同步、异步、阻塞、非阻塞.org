#+TITLE: 同步、异步、阻塞、非阻塞

* 概述
一直被这些名词所困扰，很多时候，又会理解阻塞 = 同步，但是实际上呢。在看了UNIX网络编程卷1后，才对这些名词有了大体的了解。

* 解释
- 同步: 导致请求进程阻塞，直到IO操作完成.(同步并不一定是阻塞的，IO一般分为两个阶段，第一个阶段准备数据，第二阶段将数据从内核拷贝到用户空间，如果第一阶段采用非阻塞方式，而第二阶段为阻塞方式，那么就是同步非阻塞IO。也即同步是形容第二个阶段。)
- 异步: 不导致请求进程阻塞。(也即异步IO，一定是非阻塞的。)
- 阻塞: 某项任务没完成时，一直等待，直到任务完成
- 非阻塞: 某项任务没完成直接返回。

其实从定义可以看出，同步和阻塞之间是有联系的，而不是两个非相交的概念。

下图描述的很清楚:
[[http://q.qxgzone.com/static/img/同步、异步、阻塞、非阻塞_io.png]]

考虑这么一个问题，为什么redis是单线程还能处理高并发，原因是其使用的epoll+自己的相关逻辑，即IO复用技术，但是你还是有问题，单线程的条件下，怎么就能处理多并发了呢？对此问题有疑惑是因为你不了解IO密集型的应用。
什么是IO密集型？其实很简单，就是IO操作频繁，cpu不是瓶颈，而io是瓶颈，io速度远远低于cpu和内存,如经常对内存(如内存拷贝，从内核空间拷贝到用户空间，一般不占用cpu资源，占用的是io资源，如dma技术或者mmap技术等等)、硬盘、网络等频繁的读写(http服务等)，一般来说这种应用会经常有cpu等待io完成，所以cpu一般会出现负载不高，而io负载高的现象，一般来说io密集型的任务，任务越多cpu效率越好，即降低了等待io的时间.解决这种问题常见的方式就是采用非阻塞io的方式即epoll，即cpu不用等待io是否完成，io没完成直接返回,cpu处理下一项任务。此种任务一般对cpu没有太大的要求，所以对语言来说也没有很高的要求，一般采用编写效率高的语言，如python即可。
而相对io密集型，就是cpu密集型，这种应用一般就是cpu高负载，io低负载，即cpu是瓶颈。像此种情况，就不能产生过多的任务，过多的任务会导致cpu频繁的进行上下文切换，会加重cpu负载。计算的任务数量一般要等于cpu的核数。同时cpu密集型需要高效运行，所以对语言也会有一定的要求,一般采用执行效率高的语言，如c/rust/c++等。
这里再废话两句，一般所说的内存零拷贝，是指cpu从内存拷贝中抽身出来，不需要cpu去执行拷贝，因为cpu效率很高，通常需要等待内存的拷贝完成才去执行另一个拷贝，而采用零拷贝的方案(如dma,mmap)等，不需要cpu在执行相关的拷贝工作，同时减少了上下文切换。详细的零拷贝可以参考 https://www.jianshu.com/p/e76e3580e356
