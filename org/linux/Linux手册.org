#+TITLE: Linux手册
* 常用
- =grep -RiP ./ "something"= 在当前目录中查找有something自研的文件，可配合less使用
- =ps aux | head -1; ps aux | grep -v "PID" | sort -nr -k3 | head -1= 查看cpu最高的进程
- =echo "hei" | cat -= ,其中 =-= 符号表示从标准输入中读取内容，而不是从文件中读取。
- =echo -n > filename= 清空文件，不加-n则有换行符, =-e= 会处理输入中的转移字符，所以 =echo -en "\n"= 和 =echo= 的效果一样
- =jobs -l= 显示nohup后台任务
- =paste file1 file2= 将两个文件相同的行合并到一行，并用 =\t= 分割
- =cwd=$(cd `dirname $0`;pwd)= 获取当前文件的绝对路径，不能直接使用  =pwd= 获取,若在其他路径执行，则路径就变成了其他路径
- =export LESSCHARSET=utf-8= 解决less乱码
* 数组
- 创建数组 =nums=()= 
- 添加成员 =nums=(${nums[*]} 2)= 注意没有逗号,or =len=${#nums[*]};nums[len+1]=2=
- 数组长度 =length=${#nums[*]}= or =length=${#nums[@]}=
- 删除元素
  1. =unset nums[1]= 删除下标为1的元素
  2. =unset nums= 清除整个数组
- 分片访问 =${nums[@]:1:4}= 从下标1开始，访问4个元素
- 遍历数组 =for ((i=0; i<${#nums[*]}; i++);do echo ${nums[$I]}; done= or =for v in ${nums[@]}; do echo $v; done= 
* map
- 创建map =declare -A map=()= ,老版本创建方式可能是 =declare -a map=()=
- 添加成员 =map["a"]="hei"= 
- 输出所有key =echo ${map[@]}= 
- 遍历map =for key in ${!map[*]}= 
* 字符串
- 去掉最后一个字符: =test=${test%?}=
- 删除前5个字符: =test=${test:5}=
- 删除右边的字符: =test=${test:0-5}=
- 保留指定间隔字符: =test=${test:n1:n2}=
- shell原样打印字符串到指定文件
  #+BEGIN_SRC shell
  #!/bin/sh
  (
  cat <<EOF
  // 文件内容
  EOF
  ) >/tmp/filename.txt
  #+END_SRC
* 循环
- for: =for j in {1..100..2}= 、 =for j in {1..100}=
- for循环按行读取
  1. =while read line ;do cmd ;done < $filename=
  2. =cat $filename | while read line; do cmd ;done=
  3. =IFS=$(echo -en "\n");for line in $(cat filename);do cmd;done)= ,如果IFS不起作用，则换成下面这种
     #+BEGIN_SRC shell
IFS='
'
     #+END_SRC
* 常用if
- 数字相等判断 =if (( $a==$b ))=
- 字符串是否为空 =if [ -z "$a" ]= 记得加 ="=
- 字符串不为空 =if [ -n "$a" ]= 记得加 ="=
- 文件是否存在 =if [ -f "/data/filename" ]= 
* sleep
- =sleep 0.01=  睡眠1毫秒
- =sleep 1= 睡眠1s
- =sleep 1s= 睡眠1秒
- =sleep 1m= 睡眠1分
- =sleep 1h= 睡眠1小时
* sed
对数据进行选取,替换,删除,新增的命令
使用方式 =sed [option] '[action]' filename=
** [option]
 参数解析
- =-n= :一般sed会把所有数据输出到屏幕，而使用-n后，只会把经过sed命令处理的行输出到屏幕
- =-e= : 允许输入多条动作
- =-i= : 一般sed不会修改文件，只会将结果显示在屏幕，但是加上-i会修改文件。
** [action]
 动作解析
- a:追加，在某一行的后边添加一行或多行
- c:行替换，用c后面的字符串替换原数据行
- i:插入，在某一行的前边插入一行或多行。
- d:删除，删除指定行
- p:输出指定行
- s:字符替换，用一个字符串替换另外一个字符串，与vim中的替换类似 =行范围s/新字符串/旧字符串/g=
** eg
- =sed -n '2p' student.txt= :查看当前文件的第二行,注意一定加上-n，如果没有-n将输出所有行。
- =sed '2,4d' student.txt= : 删除第二行到第四行的数据
- =sed '2a something' student.txt= :在第二行的后边加入一行内容
- =sed '2i something' student.txt= :在第二行的前边加入一行内容
- =sed '4c something' student.txt= :将第4行替换为something
- =sed '4s/70/100/g' student.txt= 将第四行的70替换为100，如果不加行数，则会替换全文内容。
- =sed -e 's/furong//g;s/fengjie//g' student.txt= -e指定多条命令，命令之间使用`;`隔开。
*** 使用变量
需要通过符号 =$=  来使用,如
 #+BEGIN_SRC shell
i=1
sed -n "${i}p" xx
 #+END_SRC
*** 修改文件
通过-i 参数,如 =sed -i "s/first/second/g" filename.txt=
修改整行:通过正则表达式,如匹配有 port 的行,并整行替换: =sed -i 's/^port.*/port:8080/g' tmp.txt=
* 后记
本来想把linux的笔记从简书搬运过来，但是太多内容了，还是算了吧，以后再说吧

