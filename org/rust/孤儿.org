#+TITLE: 孤儿

* 概述
rust中有一个原则叫孤儿原则，炸听起来像是在骂人，其是在描述在什么情况下可以为一个struct或enum实现某一个trait.

* 概念
孤儿原则是这么描述的：只有当 =trait= 或者要实现 =trait= 的类型位于 =crate= 的本地作用域时，才能为该类型实现 =trait= 。什么意思呢，这个crate其实就是你的项目，假如你的项目里有一个 =struct MyStruct= ，那么你就可以为其实现任何你能导入的 =trait= ,如 =Display= 。而假如你的项目里有一个 =trait MyTrait= ，那么你就可以将这个 =MyTrait= 为任何可以导入的结构体实现。但是你不能为 =Vec= 实现 =trait Display=,原因就是这俩货都不是你项目代码里的，这样你就没法破坏他们自身的代码。
得益于孤儿原则，当你想要为一个结构体添加新的方法时，你只能在本地先创建一个trait,这个trait内容可以为空，如 =trait MyTrait= ,然后，你就可以为Vec添加新的方法: =impl MyTrait for Vec{}= ,你不想创建trait而为Vec实现方法基本不可能，即 =impl Vec= 是不被允许的.
 
即trait和struct不能单独出现，所以被称为孤儿原则就不奇怪了。
