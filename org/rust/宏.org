#+TITLE: 宏

* 定义宏
eg:
#+BEGIN_SRC rust
#[macro_export] // 表明宏是可导出的，可被外部使用的
macro_rules! vec2 { 
    // 位于大括号内部的就是宏的定义体，其结构与match类似，会有模式匹配，如vec![1,2,3]就与下方的( $( $x:expr ),* )匹配，所以会执行对应的代码块。但是宏匹配的不是值，而是代码结果。
    ( $( $x:expr ),* ) => {  // $( $x:expr ) expr表示任意表达式,x则是匹配的变量，在代码块中会用到。而后边跟着逗号，则表示一个逗号分隔符可以有选择的出现代码$()之后，* 说明该模式匹配零个或多个 * 之前的任何模式
        {
            let mut temp_vec = Vec::new();
            $(
                temp_vec.push($x);
            )* // 与前边的 $( $x:expr ),* 相呼应 
            temp_vec
        }
    };
}
#+END_SRC
