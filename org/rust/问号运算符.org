#+TITLE: ?的运用

* 概述
=?= 在rust中可以简化很多代码，他是什么意思呢，应该怎么用呢，依我慢慢道来。
* 解释

在不使用 =?= 运算符的时候，对于一些Result<>的返回值而言，一般需要使用match来进行处理。如以下代码:
#+BEGIN_SRC rust
fn test() -> Result<io::File, io::Error> {
    let f = match File::open("src/main.rs"){
        Ok(f) => f,
        Err(e) => return Err(e);
    };
    let mut s = String::new();
    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => return Err(e);
    }
}
#+END_SRC
代码的含义解决是，当遇到错误的时候，返回该错误，否则正常运行，如果你平常写代码的时候，经常要使用match来处理Result的返回值，且处理的模式基本一样，那么就会写很多模式相同的重复代码，为了解决这个问题，rust使用 =?= 运算符来简化代码，如:
#+BEGIN_SRC rust
File::open("src/main.rs")?;
// 上述代码的作用与以下代码一样
match File::open("src/main.rs") {
    Ok(f) => f,
    Err(e) => return Err(e),
}

// 有了?操作符，就可以将上边的例子更为简化,使用 ?.
File::open("src/main.rs")?.read_to_string(&mut s)?;
#+END_SRC

但是值得注意的是，现实的代码中，很多函数返回的Err类型与你的函数的Err类型并不一样，那么你使用 =?= 时就会有限制并报错，所以需要了解下 =?= 的原理是什么。 =?= 是调用Result<T,E>中的E::from(e) 来进行操作的，即要求E已实现了对应的From trait, 在std::convert::From中，有这么一个实现，impl <T> From<T> for T, 即所有类型均给自己实现了对应的From trait,所以对于一个类型T的变量t, T::from(t)返回的还是他自己。如:
#+BEGIN_SRC rust
#[derive(Debug)]
struct MyError(String);

impl std::convert::From<io::Error> for MyError {
    fn from(err: io::Error) -> MyError {
        MyError("test".to_string())
    }
}

fn test() -> Result<String, MyError> {
    let mut s = String::new();
    // ?会自动调用MyError::from(e),其中e的类型是io::Error
    File::open("src/main.rs")?.read_to_string(&mut s)?;
    Ok(s)
}
#+END_SRC

根据这一特性，给返回的统一Error类型实现上From trait, 就可以在代码里疯狂的使用 =?= ,虽然说疯狂使用不好，但是对于我这种小白而言，管他好不好，浪就够了。

所以此时你应该可以理解，为什么函数在返回Result<T,Box<dyn Error>>时，内部可以疯狂使用 =?= 了吧，原因就是Box为所有类型实现了From trait
