#+TITLE: 智能指针

* 概述
rust中有很多智能指针，如Cell,RefCell,Box,Rc,Arc等等，这些指针的场景还很多，需要弄明白。
* 详述
虽然是智能指针，但是可以不把其当指针用，因为rust中存在deref,所以可以将其当作原类型使用。
对于Cell和RefCell,因为struct中的field中不能使用mut修饰，如果内部的域需要mut属性，可以将struct设置为mut类型，或者使用Cell或者RefCell.
1. Cell<T>:一个包含一个T类型数据的指针，他唯一特殊的用途是你可以对T(即使是非可变的类型)进行可变(set)操作。相关方法有: =Cell::new(value)= , =cell.get()= , =cell.set(value)= .而Cell本身是不可变，而内部的数据是可变的，这就是内部可变性。cell.set(value)实际上就是将内部对应的值替换掉了,之前的值丢弃掉，所以其value值是mutable，可以看到set的方法声明是这样的: =fn set(&self, value:T)=. 其内部是通过unsafe来达到内部可变性的。
2. RefCell<T>:如果T类型不是Copy类型，那么Cell是无法使用的，因为Cell中的get方法返回的是T的copy.而如果一个T不是Copy类型，那么可以使用RefCell<T>，该方法和Cell不同的是，RefCell获取值是通过 ref_cell.borrow()方法，其返回Ref<T>，及获取内部值的引用。而可以通过ref_cell.borrow_mut()获取可变引用,返回RefMut<T>。
3. Box：在Rust中，对于trait类型是没有固定的长度的，但struct在声明的时候，必须要明确其长度(size),所以假设有 =trait A=,而 =struct B{a:A}= 是不被允许的，原因就是在编译时，struct长度就必须明确，而Box是一个智能指针，其作用是直接在堆中分配指向的内容，而智能指针的长度是确定的，所以struct可以这样写 =struct B{a:Box<A>}=
4. Cow: 写时复制，即Copy On Write,是指如果需要对某个变量进行复制时，系统并不会直接复制，而是使用相同的内存空间，在只读的时候，读取相同的空间，而如果发生了数据的写入时，才会进行复制操作。原因就是如果变量内存很大时，直接复制会占用很大的时间，而如果复制完后并不发生写入，则会浪费资源,多用于读多写少的操作。而Rust中的Cow是一个枚举类型，包含Borrow(T)及Owned(T)。使用Cow::from(xx)来创建一个Cow时，如果xx是引用，对cow做任何操作都不会影响到xx，而xx是值，则xx会被move,对其操作，其实就是更改xx.通俗点说，Cow就是某个数据的克隆体，不过什么时候克隆，需要调用相关方法的时候，才会被决定。
5. Rc or Arc: 引用记数，Reference Count.第一个Rc是非线程安全的，而Arc是线程安全的，通常用在多线程之间，注意其方法clone()并不会复制内部的数据，只是多了一个对引用记数器进行+1,同样在生命周期结束后，并不会将引用值删除，而是引用数减一。在Rust中一个资源只能拥有一个拥有者，而使用Rc后，一个资源可以有多个拥有者.对于闭包而言，如果传递了一个引用，这个闭包并不知道会在什么时候结束，所以传递一个Rc来说是比较合适的，而多线程的spawn会传递进一个闭包，如果该闭包接受一个引用，同样不知道该线程什么时候结束，那么传递一个Arc引用比较合适,这个时候程序运行就不依赖引用的生命周期了。
